# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pr2_msgs/BatteryState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BatteryState(genpy.Message):
  _md5sum = "00e9f996c2fc26700fd25abcd8422db0"
  _type = "pr2_msgs/BatteryState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# DEPRECATED.  Use pr2_msgs/BatteryState2 instead.
# Each batteries registers
int32 lastTimeBattery #epoch time
uint16[48] batReg
uint16[48] batRegFlag
int32[48] batRegTime
"""
  __slots__ = ['lastTimeBattery','batReg','batRegFlag','batRegTime']
  _slot_types = ['int32','uint16[48]','uint16[48]','int32[48]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lastTimeBattery,batReg,batRegFlag,batRegTime

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BatteryState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lastTimeBattery is None:
        self.lastTimeBattery = 0
      if self.batReg is None:
        self.batReg = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.batRegFlag is None:
        self.batRegFlag = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.batRegTime is None:
        self.batRegTime = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    else:
      self.lastTimeBattery = 0
      self.batReg = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.batRegFlag = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.batRegTime = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.lastTimeBattery))
      buff.write(_struct_48H.pack(*self.batReg))
      buff.write(_struct_48H.pack(*self.batRegFlag))
      buff.write(_struct_48i.pack(*self.batRegTime))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.lastTimeBattery,) = _struct_i.unpack(str[start:end])
      start = end
      end += 96
      self.batReg = _struct_48H.unpack(str[start:end])
      start = end
      end += 96
      self.batRegFlag = _struct_48H.unpack(str[start:end])
      start = end
      end += 192
      self.batRegTime = _struct_48i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.lastTimeBattery))
      buff.write(self.batReg.tostring())
      buff.write(self.batRegFlag.tostring())
      buff.write(self.batRegTime.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.lastTimeBattery,) = _struct_i.unpack(str[start:end])
      start = end
      end += 96
      self.batReg = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=48)
      start = end
      end += 96
      self.batRegFlag = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=48)
      start = end
      end += 192
      self.batRegTime = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=48)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_48i = struct.Struct("<48i")
_struct_48H = struct.Struct("<48H")
