# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pr2_msgs/BatteryState2.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class BatteryState2(genpy.Message):
  _md5sum = "91b4acb000aa990ac3006834f9a99669"
  _type = "pr2_msgs/BatteryState2"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message communicates the state of a single battery.
# Battery Controller Flags, one per battery
bool present       # is this pack present
bool charging      # is this pack charging
bool discharging   # is this pack discharging
bool power_present # is there an input voltage
bool power_no_good # is there a fault (No Good)
bool inhibited     # is this pack disabled for some reason
# These registers are per battery
time      last_battery_update     # last time any battery update occurred
int16[48] battery_register        # value of this register in the battery
bool[48]  battery_update_flag     # Has this register ever been updated
time[48]  battery_register_update # last time this specific register was updated
"""
  __slots__ = ['present','charging','discharging','power_present','power_no_good','inhibited','last_battery_update','battery_register','battery_update_flag','battery_register_update']
  _slot_types = ['bool','bool','bool','bool','bool','bool','time','int16[48]','bool[48]','time[48]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       present,charging,discharging,power_present,power_no_good,inhibited,last_battery_update,battery_register,battery_update_flag,battery_register_update

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BatteryState2, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.present is None:
        self.present = False
      if self.charging is None:
        self.charging = False
      if self.discharging is None:
        self.discharging = False
      if self.power_present is None:
        self.power_present = False
      if self.power_no_good is None:
        self.power_no_good = False
      if self.inhibited is None:
        self.inhibited = False
      if self.last_battery_update is None:
        self.last_battery_update = genpy.Time()
      if self.battery_register is None:
        self.battery_register = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      if self.battery_update_flag is None:
        self.battery_update_flag = [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False]
      if self.battery_register_update is None:
        self.battery_register_update = [genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time()]
    else:
      self.present = False
      self.charging = False
      self.discharging = False
      self.power_present = False
      self.power_no_good = False
      self.inhibited = False
      self.last_battery_update = genpy.Time()
      self.battery_register = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      self.battery_update_flag = [False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False]
      self.battery_register_update = [genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time(),genpy.Time()]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6B2I.pack(_x.present, _x.charging, _x.discharging, _x.power_present, _x.power_no_good, _x.inhibited, _x.last_battery_update.secs, _x.last_battery_update.nsecs))
      buff.write(_struct_48h.pack(*self.battery_register))
      buff.write(_struct_48B.pack(*self.battery_update_flag))
      for val1 in self.battery_register_update:
        _x = val1
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.last_battery_update is None:
        self.last_battery_update = genpy.Time()
      if self.battery_register_update is None:
        self.battery_register_update = None
      end = 0
      _x = self
      start = end
      end += 14
      (_x.present, _x.charging, _x.discharging, _x.power_present, _x.power_no_good, _x.inhibited, _x.last_battery_update.secs, _x.last_battery_update.nsecs,) = _struct_6B2I.unpack(str[start:end])
      self.present = bool(self.present)
      self.charging = bool(self.charging)
      self.discharging = bool(self.discharging)
      self.power_present = bool(self.power_present)
      self.power_no_good = bool(self.power_no_good)
      self.inhibited = bool(self.inhibited)
      start = end
      end += 96
      self.battery_register = _struct_48h.unpack(str[start:end])
      start = end
      end += 48
      self.battery_update_flag = _struct_48B.unpack(str[start:end])
      self.battery_update_flag = map(bool, self.battery_update_flag)
      self.battery_register_update = []
      for i in range(0, 48):
        val1 = genpy.Time()
        _x = val1
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        self.battery_register_update.append(val1)
      self.last_battery_update.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6B2I.pack(_x.present, _x.charging, _x.discharging, _x.power_present, _x.power_no_good, _x.inhibited, _x.last_battery_update.secs, _x.last_battery_update.nsecs))
      buff.write(self.battery_register.tostring())
      buff.write(self.battery_update_flag.tostring())
      for val1 in self.battery_register_update:
        _x = val1
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.last_battery_update is None:
        self.last_battery_update = genpy.Time()
      if self.battery_register_update is None:
        self.battery_register_update = None
      end = 0
      _x = self
      start = end
      end += 14
      (_x.present, _x.charging, _x.discharging, _x.power_present, _x.power_no_good, _x.inhibited, _x.last_battery_update.secs, _x.last_battery_update.nsecs,) = _struct_6B2I.unpack(str[start:end])
      self.present = bool(self.present)
      self.charging = bool(self.charging)
      self.discharging = bool(self.discharging)
      self.power_present = bool(self.power_present)
      self.power_no_good = bool(self.power_no_good)
      self.inhibited = bool(self.inhibited)
      start = end
      end += 96
      self.battery_register = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=48)
      start = end
      end += 48
      self.battery_update_flag = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=48)
      self.battery_update_flag = map(bool, self.battery_update_flag)
      self.battery_register_update = []
      for i in range(0, 48):
        val1 = genpy.Time()
        _x = val1
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        self.battery_register_update.append(val1)
      self.last_battery_update.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6B2I = struct.Struct("<6B2I")
_struct_48B = struct.Struct("<48B")
_struct_2I = struct.Struct("<2I")
_struct_48h = struct.Struct("<48h")
