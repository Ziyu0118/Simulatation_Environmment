#!/usr/bin/env python
import rospy
from geometry_msgs.msg import Twist, Point, Quaternion # 几何学消息类型
#Twist:linear.x linear.y linear.z    Point: x,y,z   Quaternion: x,y,z,w 
import tf   # transform betwween two axis
from rbx1_nav.transform_utils import quat_to_angle, normalize_angle #四元素到 欧拉角 归一化姿态角
# Quaternion to eulerian angleand and constarin the angle to -180-180
from math import radians, copysign, sqrt, pow, pi # 数学函数和变量

# 定义一个python类
class GoToPoint():
    # __init__ dorner init函数 类构造函数 初始化函数
    def __init__(self):
        # Creat a node named out_and_back
        rospy.init_node('out_and_back', anonymous=False) # 初始化节点
        # Set rospy to execute a shutdown function when exiting       
        rospy.on_shutdown(self.shutdown) # 类似类析构函数?
        # Creat a Publisher, to control the robot's speed  topic  message_type  buffer_size
	# 发布一个话题 /cmd_vel  运动指令 
        self.cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size=5)
        
        # 变量定义
        rate = 30                    # 运动更新频率    
        r = rospy.Rate(rate)         
        linear_speed = 0.15          # 前进线速度 0.15 m/s
        goal_distance = 2.0          # 前进距离 m
        angular_speed = 0.5          # 角速度 rad/s 
        angular_tolerance = radians(2.5) # 角度分辨率 2.5度转换成 弧度
        goal_angle = pi              # 旋转的角度值  180度
        
        # 创建一个坐标变换监听器
        self.tf_listener = tf.TransformListener()       
        # 休息两秒，等待tf完成初始化缓冲区
        rospy.sleep(2)       
        self.odom_frame = '/odom'   # Set the robot's odometery frame   里程计坐标系(类似全局坐标系)
        
        # Find the reference frame
        # Find out if the robot uses /base_link or /base_footprint
        # /base_footprint frame used by the TurtleBot          (机器人本体坐标系)
        # /base_link frame      used by Pi Robot and Maxwell
        try:
	    # 等待'/odom' 和 '/base_footprint' 两坐标系之间的变换
            self.tf_listener.waitForTransform(self.odom_frame, '/base_footprint', rospy.Time(), rospy.Duration(1.0))
            self.base_frame = '/base_footprint' # the robot uses /base_footprint frame   
	
        except (tf.Exception, tf.ConnectivityException, tf.LookupException): # Exception = error state 
	
            try:
                self.tf_listener.waitForTransform(self.odom_frame, '/base_link', rospy.Time(), rospy.Duration(1.0))
                self.base_frame = '/base_link'  # the robot uses /base_footprint frame
            except (tf.Exception, tf.ConnectivityException, tf.LookupException):

                rospy.loginfo("Cannot find transform between /odom and /base_link or /base_footprint")
                rospy.signal_shutdown("tf Exception")  
               
        # Initialize the position variable as a Point type(comes from geometry_msgs.msg which has x,y,z)
	# 初始化位置变量
        position = Point()
            
        # Loop once for each leg of the trip, back and forth 
        for i in range(2):
            # initialize the movement command with linear velocity
            move_cmd = Twist()       
            move_cmd.linear.x = linear_speed            
            #record the starting position(loop once and loop twice were different)
            (position, rotation) = self.get_odom()                     
            x_start = position.x  
            y_start = position.y
            distance = 0                               
            
            while distance < goal_distance and not rospy.is_shutdown():
                self.cmd_vel.publish(move_cmd)                   #  发布前进指令，直到达到距离
                r.sleep()
                (position, rotation) = self.get_odom()          # 当前 里程计位置              
                # Compute the Euclidean distance from the start         
                distance = sqrt(pow((position.x - x_start), 2) +        # 起点到当前位置的距离
                                pow((position.y - y_start), 2))
                
            # 先停止
            #stop()
            move_cmd = Twist()             # Initialize the movement command  to zero
            self.cmd_vel.publish(move_cmd) # publish the stop movement command
            rospy.sleep(1)                 # 休息
            
            # rotate=====旋转半圈===============
            move_cmd.angular.z = angular_speed      # Set the movement command to a rotation        
            last_angle = rotation                   #  设置角速度
            turn_angle = 0                          # traveled angle 
	    
            # 旋转的角度 为达到 预设的角度值，就一直旋转
            while abs(turn_angle + angular_tolerance) < abs(goal_angle) and not rospy.is_shutdown():# hasno't reached the desired goal_angle     
                self.cmd_vel.publish(move_cmd)                 # 发布旋转
                r.sleep()                                      # sleep with rate
                (position, rotation) = self.get_odom()         # 当前角度     
                delta_angle = normalize_angle(rotation - last_angle) # 角度差
                turn_angle += delta_angle       # update the traveled turn_angle
                last_angle = rotation           # update the last_angle
                
            # Stop the robot before the next leg
            #stop()
            move_cmd = Twist()
            self.cmd_vel.publish(move_cmd)
            rospy.sleep(1)
            
        # Stop the robot for good
        self.cmd_vel.publish(Twist())
          
    def get_odom(self):
        # Get the current transform between the odom and base frames
        try:
            (trans, rot)  = self.tf_listener.lookupTransform(self.odom_frame, self.base_frame, rospy.Time(0))
        except (tf.Exception, tf.ConnectivityException, tf.LookupException):
            rospy.loginfo("TF Exception")
            return
        # used * is Python's a notion for passing a list of numbers to a function
        # trans is a list of x, y, and z coordinates
        # rot is a list of x, y, z and w quaternion components.
        return (Point(*trans), quat_to_angle(Quaternion(*rot))) #current location Point and the current angel
    
    # stop and close automatically when shutting down the node
    def shutdown(self):
        # Always stop the robot when shutting down the node.
        rospy.loginfo("Stopping the robot...")
        self.cmd_vel.publish(Twist())
        rospy.sleep(1)
    # stop the robot    
    def stop(self):
        move_cmd = Twist()
        self.cmd_vel.publish(move_cmd)
        rospy.sleep(1)
 
if __name__ == '__main__':
    try:
        GoToPoint()
    except:
        rospy.loginfo("Out-and-Back node terminated.")
